# Copyright 2019. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
This module creates and configures the Flask app and sets up the logging
and SQL database
"""
import os
import sys
from flask import Flask
import json

# Get configuration from environment
DATABASE_URI = os.getenv('DATABASE_URI', 'postgres://postgres:postgres@localhost:5432/postgres')
SECRET_KEY = os.getenv('SECRET_KEY', 's3cr3t-key-shhhh')

if 'VCAP_SERVICES' in os.environ:
    print('Getting database from VCAP_SERVICES')
    vcap_services = json.loads(os.environ['VCAP_SERVICES'])
    DATABASE_URI = vcap_services['user-provided'][0]['credentials']['database_uri']

# Create Flask application
app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = SECRET_KEY
app.config['ENV'] = 'development'
app.config['DEBUG'] = False
app.config['API_KEY'] = os.getenv('API_KEY')
from service import service
from loggin import logger

# Import the routes After the Flask app is created

# Set up logging for production
logger.initialize_logging()
app.logger.info(
    '  P R O D U C T   S E R V I C E   R U N N I N G  '.center(70, '*'))

app.logger.info('Service inititalized!')
# If an API Key was not provided, autogenerate one
if not app.config['API_KEY']:
    app.config['API_KEY'] = service.generate_apikey()
    app.logger.info('Missing API Key! Autogenerated: {}'.format(app.config['API_KEY']))
